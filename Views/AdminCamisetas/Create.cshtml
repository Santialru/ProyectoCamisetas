@model ProyectoCamisetas.Models.Camiseta
@{
    ViewData["Title"] = "Nueva Camiseta";
}

<h1>Nueva Camiseta</h1>

<form asp-action="Create" method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @Html.Partial("_CamisetaForm", Model)
    <div class="mt-3">
        <button type="button" class="btn btn-outline-primary" id="btnAddImages">Agregar imágenes</button>
        @for (int i = 0; i < 5; i++)
        {
            <input type="hidden" name="ImageUrls" />
        }
        <small class="text-muted d-block mt-1">Hasta 5 imágenes. Puedes arrastrar o seleccionar desde tu dispositivo.</small>
        <div id="dropArea" class="dropzone mt-2"><strong>Arrastra imágenes aquí</strong> o haz clic para elegir (máximo 5)</div>
        <input id="imagePicker" type="file" accept="image/*" multiple hidden />
        <div id="img-previews" class="d-flex flex-wrap gap-2 mt-2"></div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" type="submit">Guardar</button>
        <a class="btn btn-secondary" asp-action="Index">Cancelar</a>
    </div>
    @Html.AntiForgeryToken()
 </form>

<partial name="_ValidationScriptsPartial" />

@section Scripts {
<script>
(() => {
  const drop = document.getElementById('dropArea');
  const picker = document.getElementById('imagePicker');
  const addBtn = document.getElementById('btnAddImages');
  addBtn.addEventListener('click', () => picker.click());
  drop.addEventListener('click', () => picker.click());

  const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
  const upload = async (file) => {
    const fd = new FormData();
    fd.append('file', file);
    const resp = await fetch('@Url.Action("UploadImage","AdminCamisetas")', {
      method: 'POST',
      headers: { 'RequestVerificationToken': token },
      credentials: 'same-origin',
      body: fd
    });
    if (!resp.ok) throw new Error('Error subiendo imagen');
    return resp.json();
  };

  const inputs = () => Array.from(document.querySelectorAll('input[name="ImageUrls"]'));
  const nextEmpty = () => inputs().find(i => !i.value);
  const setUrls = (arr) => { inputs().forEach((i,idx) => i.value = arr[idx] || ''); };

  const handleFiles = async (fileList) => {
    for (const file of Array.from(fileList)) {
      const slot = nextEmpty();
      if (!slot) break; // ya llegamos al máximo (5)
      try {
        const { url } = await upload(file);
        slot.value = url;
        addPreview(url);
      } catch (e) { console.error(e); }
    }
  };

  const addPreview = (url) => {
    const preview = document.getElementById('img-previews');
    const img = document.createElement('img');
    img.src = url; img.alt = 'img'; img.draggable = true;
    img.style = 'width:100px;height:100px;object-fit:cover;border-radius:6px;border:1px solid #ddd;';
    preview.appendChild(img);
  };

  drop.addEventListener('dragover', e => { e.preventDefault(); drop.classList.add('dragover'); });
  drop.addEventListener('dragleave', () => drop.classList.remove('dragover'));
  drop.addEventListener('drop', e => { e.preventDefault(); drop.classList.remove('dragover'); handleFiles(e.dataTransfer.files); });
  picker.addEventListener('change', e => handleFiles(picker.files));

  // Drag & drop reordenamiento
  let dragSrc = null;
  document.getElementById('img-previews').addEventListener('dragstart', e => {
    if (e.target.tagName === 'IMG') { dragSrc = e.target; e.dataTransfer.effectAllowed = 'move'; }
  });
  document.getElementById('img-previews').addEventListener('dragover', e => { e.preventDefault(); e.dataTransfer.dropEffect = 'move'; });
  document.getElementById('img-previews').addEventListener('drop', e => {
    e.preventDefault();
    const target = e.target.closest('img');
    if (dragSrc && target && dragSrc !== target) {
      const parent = target.parentNode;
      const imgs = Array.from(parent.querySelectorAll('img'));
      const from = imgs.indexOf(dragSrc);
      const to = imgs.indexOf(target);
      if (from > -1 && to > -1) {
        if (from < to) parent.insertBefore(dragSrc, target.nextSibling); else parent.insertBefore(dragSrc, target);
        const ordered = Array.from(parent.querySelectorAll('img')).map(i => i.src);
        setUrls(ordered);
      }
    }
    dragSrc = null;
  });
})();
</script>
}

