@model ProyectoCamisetas.Models.Camiseta
@{
    ViewData["Title"] = "Editar Camiseta";
}

<h1>Editar Camiseta</h1>

<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="Id" />
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @Html.Partial("_CamisetaForm", Model)
    <div class="mt-3">
        <button type="button" class="btn btn-outline-primary" id="btnAddImages">Agregar imágenes</button>
        @for (int i = 0; i < 5; i++)
        {
            var url = Model?.Imagenes?.OrderBy(x => x.Orden).ElementAtOrDefault(i)?.Url ?? string.Empty;
            <input type="hidden" name="ImageUrls" value="@url" />
        }
        <small class="text-muted d-block mt-1">Hasta 5 imágenes. Puedes arrastrar o seleccionar desde tu dispositivo.</small>
        <div class="d-flex flex-wrap gap-2 mt-2" id="img-previews">
            @if (Model?.Imagenes != null)
            {
                foreach (var img in Model.Imagenes.OrderBy(x => x.Orden))
                {
                    <img src="@img.Url" alt="img" draggable="true" style="width:100px;height:100px;object-fit:cover;border-radius:6px;border:1px solid #ddd;" />
                }
            }
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" type="submit">Guardar</button>
        <a class="btn btn-secondary" asp-action="Index">Cancelar</a>
    </div>
    @Html.AntiForgeryToken()
</form>

<partial name="_ValidationScriptsPartial" />

@section Scripts {
<script>
(() => {
  const drop = document.createElement('div');
  drop.className = 'dropzone mt-3';
  drop.innerHTML = '<strong>Arrastra imágenes aquí</strong> o haz clic para elegir (máximo 5)';
  const form = document.querySelector('form[asp-action="Edit"]') || document.querySelector('form');
  const hint = document.getElementById('btnAddImages').parentElement;
  hint.appendChild(drop);

  const picker = document.createElement('input');
  picker.type = 'file';
  picker.accept = 'image/*';
  picker.multiple = true;
  drop.addEventListener('click', () => picker.click());
  document.getElementById('btnAddImages').addEventListener('click', () => picker.click());

  const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
  const upload = async (file) => {
    const fd = new FormData();
    fd.append('file', file);
    const resp = await fetch('@Url.Action("UploadImage","AdminCamisetas")', {
      method: 'POST',
      headers: { 'RequestVerificationToken': token },
      credentials: 'same-origin',
      body: fd
    });
    if (!resp.ok) throw new Error('Error subiendo imagen');
    return resp.json();
  };

  const inputs = () => Array.from(document.querySelectorAll('input[name="ImageUrls"]'));
  const nextEmpty = () => inputs().find(i => !i.value);
  const getUrls = () => inputs().map(i => i.value).filter(v => !!v);
  const setUrls = (arr) => { inputs().forEach((i,idx) => i.value = arr[idx] || ''); };

  const handleFiles = async (fileList) => {
    for (const file of Array.from(fileList)) {
      const slot = nextEmpty();
      if (!slot) break;
      try { const { url } = await upload(file); slot.value = url; addPreview(url); }
      catch (e) { console.error(e); }
    }
  };

  const addPreview = (url) => {
    let preview = document.getElementById('img-previews');
    if (!preview) {
      preview = document.createElement('div');
      preview.id = 'img-previews';
      preview.className = 'd-flex flex-wrap gap-2 mt-2';
      drop.insertAdjacentElement('afterend', preview);
    }
    const img = document.createElement('img');
    img.src = url; img.alt = 'img'; img.draggable = true;
    img.style = 'width:100px;height:100px;object-fit:cover;border-radius:6px;border:1px solid #ddd;';
    preview.appendChild(img);
  };

  // Drag & drop reordenamiento de miniaturas
  let dragSrc = null;
  document.getElementById('img-previews').addEventListener('dragstart', e => {
    if (e.target.tagName === 'IMG') { dragSrc = e.target; e.dataTransfer.effectAllowed = 'move'; }
  });
  document.getElementById('img-previews').addEventListener('dragover', e => { e.preventDefault(); e.dataTransfer.dropEffect = 'move'; });
  document.getElementById('img-previews').addEventListener('drop', e => {
    e.preventDefault();
    const target = e.target.closest('img');
    if (dragSrc && target && dragSrc !== target) {
      const parent = target.parentNode;
      const imgs = Array.from(parent.querySelectorAll('img'));
      const from = imgs.indexOf(dragSrc);
      const to = imgs.indexOf(target);
      if (from > -1 && to > -1) {
        if (from < to) parent.insertBefore(dragSrc, target.nextSibling); else parent.insertBefore(dragSrc, target);
        // Actualizar inputs según nuevo orden
        const ordered = Array.from(parent.querySelectorAll('img')).map(i => i.src);
        setUrls(ordered);
      }
    }
    dragSrc = null;
  });

  drop.addEventListener('dragover', e => { e.preventDefault(); drop.classList.add('dragover'); });
  drop.addEventListener('dragleave', () => drop.classList.remove('dragover'));
  drop.addEventListener('drop', e => { e.preventDefault(); drop.classList.remove('dragover'); handleFiles(e.dataTransfer.files); });
  picker.addEventListener('change', e => handleFiles(picker.files));
})();
</script>
}
